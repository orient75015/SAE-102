#include <iostream>
#include <fstream>
#include <iomanip>
#include <cassert>


typedef int Lettres; 

// Conteneur
struct ConteneurTS {
    static const int CAPACITE = 3;
    Lettres tab[CAPACITE];
    int nbLettres;
};

void initialiser(ConteneurTS& c) {
    c.nbLettres = 0;
}

Lettres lire(const ConteneurTS& c, unsigned int i) {
    assert(i < c.nbLettres);
    return c.tab[i];
}

void ecrire(ConteneurTS& c, unsigned int i, const Lettres& lettres) {
    assert(i <= c.nbLettres&& i < ConteneurTS::CAPACITE);
    c.tab[i] = item;
    if (i == c.nbLettres)
        c.nbLettres++;
}

// Conteneur 
struct ConteneurTDE {
    Lettres* tab;
    unsigned int capacite;
    unsigned int pasExtension;
};

void initialiser(ConteneurTDE& c, unsigned int capa, unsigned int p) {
    assert((capa > 0) && (p > 0));
    c.capacite = capa;
    c.pasExtension = p;
    c.tab = new Lettres[capa];
}

void detruire(ConteneurTDE& c) {
    delete[] c.tab;
    c.tab = NULL;
}

Lettres lire(const ConteneurTDE& c, unsigned int i) {
    assert(i < c.capacite);
    return c.tab[i];
}

void ecrire(ConteneurTDE& c, unsigned int i, const Lettres& it) {
    if (i >= c.capacite) {
        unsigned int newTaille = (i + 1) * c.pasExtension;
        Lettres* newT = new Lettres[newTaille];
        for (unsigned int i = 0; i < c.capacite; ++i)
            newT[i] = c.tab[i];
        delete[] c.tab;
        c.tab = newT;
        c.capacite = newTaille;
    }
    c.tab[i] = it;
}

// Conteneur
struct ConteneurTD {
    Lettres* tab;
    unsigned int capacite;
};

void initialiser(ConteneurTD& c, unsigned int capa) {
    assert(capa > 0);
    c.capacite = capa;
    c.tab = new Lettres[capa];
}

void detruire(ConteneurTD& c) {
    delete[] c.tab;
    c.tab = NULL;
}

Lettres lire(const ConteneurTD& c, unsigned int i) {
    assert(i < c.capacite);
    return c.tab[i];
}

void ecrire(ConteneurTD& c, unsigned int i, const Lettres& it) {
    assert(i < c.capacite);
    c.tab[i] = it;
}

// Pile
struct Pile {
    Lettres* tab;
    unsigned int capacite;
    int sommet;
};

void initialiser(Pile& p, unsigned int c) {
    assert(c > 0);
    p.capacite = c;
    p.tab = new Lettres[c];
    p.sommet = -1;
}

void detruire(Pile& p) {
    delete[] p.tab;
    p.tab = NULL;
}

bool estPleine(const Pile& p) {
    return (p.sommet == (p.capacite - 1));
}

bool estVide(const Pile& p) {
    return (p.sommet == -1);
}

Lettres sommet(const Pile& p) {
    assert(!estVide(p));
    return p.tab[p.sommet];
}

void empiler(Pile& p, const Lettres& it) {
    assert(!estPleine(p));
    p.sommet++;
    p.tab[p.sommet] = it;
}

void depiler(Pile& p) {
    assert(!estVide(p));
    p.sommet--;
}

// File
struct File {
    ConteneurTD c;
    unsigned int indPremier;
    unsigned int indProchain;
    unsigned int nb;
};

void initialiser(File& f, unsigned int capa) {
    assert(capa > 0);
    initialiser(f.c, capa);
    f.indPremier = 0;
    f.indProchain = 0;
    f.nb = 0;
}

void detruire(File& f) {
    detruire(f.c);
}

bool estPleine(const File& f) {
    return (f.nb == f.c.capacite);
}

bool estVide(const File& f) {
    return (f.nb == 0);
}

Lettres tete(const File& f) {
    assert(!estVide(f));
    return lire(f.c, f.indPremier);
}

void entrer(File& f, const Lettres& it) {
    assert(!estPleine(f));
    ecrire(f.c, f.indProchain, it);
    f.indProchain = (f.indProchain + 1) % f.c.capacite;
    f.nb++;
}

void sortir(File& f) {
    assert(!estVide(f));
    f.indPremier = (f.indPremier + 1) % f.c.capacite;
    f.nb--;
}

// Liste
struct Liste {
    ConteneurTD c;
    unsigned int nb;
};

void initialiser(Liste& l, unsigned int capa, unsigned int pas) {
    assert((capa > 0) && (pas > 0));
    initialiser(l.c, capa);
    l.nb = 0;
}

void detruire(Liste& l) {
    detruire(l.c);
}

unsigned int longueur(const Liste& l) {
    return l.nb;
}

Lettres lire(const Liste& l, unsigned int pos) {
    assert(pos < l.nb);
    return lire(l.c, pos);
}

void ecrire(Liste& l, unsigned int pos, const Lettres& it) {
    assert(pos < l.nb);
    ecrire(l.c, pos, it);
}

void inserer(Liste& l, unsigned int pos, const Lettres& it) {
    assert(pos <= l.nb);
    for (unsigned int i = l.nb; i > pos; i--) {
        ecrire(l.c, i, lire(l.c, i - 1));
    }
    ecrire(l.c, pos, it);
    l.nb++;
}

void supprimer(Liste& l, unsigned int pos) {
    assert((l.nb != 0) && (pos < l.nb));
    l.nb--;
    for (unsigned int i = pos; i < l.nb; ++i)
        ecrire(l.c, i, lire(l.c, i + 1));
}

// Fonction principale
int main() {
    // mettre le code principale
    return 0;
}
